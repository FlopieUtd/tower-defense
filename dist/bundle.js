!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1),o=n(3);t.CANVAS=document.querySelector("canvas"),t.CTX=t.CANVAS.getContext("2d"),t.SPAWN_LOCATION=o.getUniquePosition(i.level01.map,2),t.HEADQUARTERS=o.getUniquePosition(i.level01.map,3),t.TILE_SIZE=50,t.STARTING_MONEY=200,t.STARTING_HQ_HEALTH=20,t.WAVE_NUM_DIV=document.querySelector(".wave-num"),t.COIN_NUM_DIV=document.querySelector(".coin-num"),t.FAST_FORWARD_DIV=document.querySelector(".fast-forward"),t.BOTTOM_BAR_DIV=document.querySelector(".bottom-bar"),t.TOOLTIP_DIV=document.querySelector(".tooltip"),t.TOOLTIP_CONTENT_DIV=document.querySelector(".tooltip-content")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2);t.level01={map:[[0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0],[0,0,1,1,1,0,0,1,1,1,0,1,1,1,1,0],[0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],[2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],waves:[{amount:15,type:"normal"},{amount:20,type:"normal"},{amount:5,type:"heavy"},{amount:10,type:"heavy"},{amount:25,type:"normal"},{amount:15,type:"heavy"},{amount:20,type:"heavy"}]},t.renderMap=function(e){i.CTX.fillStyle="black",i.CTX.fillRect(0,0,e[0].length*i.TILE_SIZE,e.length*i.TILE_SIZE),e.forEach((function(e,t){e.forEach((function(e,n){e>0&&e<4&&(i.CTX.fillStyle="#444",i.CTX.fillRect(n*i.TILE_SIZE,t*i.TILE_SIZE,i.TILE_SIZE,i.TILE_SIZE))}))}))},t.renderBuildings=function(e){e.forEach((function(e,t){e.forEach((function(e,n){2===e&&(i.CTX.fillStyle="#222",i.CTX.fillRect(n*i.TILE_SIZE,t*i.TILE_SIZE,i.TILE_SIZE,i.TILE_SIZE),i.CTX.font="20px monospace",i.CTX.fillStyle="white",i.CTX.textAlign="center",i.CTX.fillText("S",n*i.TILE_SIZE+.5*i.TILE_SIZE,t*i.TILE_SIZE+.6*i.TILE_SIZE)),3===e&&(i.CTX.fillStyle="#222",i.CTX.fillRect(n*i.TILE_SIZE,t*i.TILE_SIZE,i.TILE_SIZE,i.TILE_SIZE),i.CTX.font="20px monospace",i.CTX.fillStyle="white",i.CTX.textAlign="center",i.CTX.fillText(o.hqHealth.value.toString(),n*i.TILE_SIZE+.5*i.TILE_SIZE,t*i.TILE_SIZE+.6*i.TILE_SIZE))}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(1),r=n(4),a=n(8),l=n(3);t.tick={value:0,waveTick:0,increase:function(){return this.value++},increaseWaveTick:function(){return this.waveTick++}},t.id={value:0,get:function(){return this.value++}},t.money={value:null,set:function(e){this.value=e,this.updateUI()},increaseBy:function(e){this.value+=e,this.updateUI()},decreaseBy:function(e){this.value-=e,this.updateUI()},updateUI:function(){i.COIN_NUM_DIV.innerHTML=this.value.toString()}},t.hqHealth={value:null,set:function(e){this.value=e},decrease:function(){this.value--}},t.waves={value:null,set:function(e){this.value=e,this.updateUI()},increase:function(){this.value++,this.updateUI()},updateUI:function(){i.WAVE_NUM_DIV.innerHTML=(this.value+1).toString()+" / "+o.level01.waves.length}},t.construction={displayPreview:!1,position:null,blueprint:null,showPreview:function(){this.displayPreview=!0},hidePreview:function(){this.displayPreview=!1},setPosition:function(e){this.position=e},setBlueprint:function(e){this.blueprint=e}},t.mouse={position:null,setPosition:function(e){this.position=e}},t.game={isPaused:!1,isFastForward:!1,isGameOver:!1,togglePaused:function(){this.isPaused=!this.isPaused},toggleFastForward:function(){this.isFastForward=!this.isFastForward},setGameOver:function(e){this.isGameOver=e}},t.activeTower={value:null,set:function(e){this.value=e?r.towers.find((function(t){return l.arePositionsEqual(t.position,e)})):null,console.log("floops"),a.renderToolTip()}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getUniquePosition=function(e,t){var n,i;return e.forEach((function(e,o){e.includes(t)&&(i=o,n=e.indexOf(t))})),{x:n,y:i}},t.getValueAtPosition=function(e,t){var n=e.x,i=e.y;return t[i]?t[i][n]:null},t.arePositionsEqual=function(e,t){return Object.keys(e).length===Object.keys(t).length&&Object.keys(e).every((function(n){return e[n]===t[n]}))},t.getAdjacentPositions=function(e,n){return[{x:e.x-1,y:e.y},{x:e.x+1,y:e.y},{x:e.x,y:e.y-1},{x:e.x,y:e.y+1}].filter((function(e){return t.getValueAtPosition(e,n)>0&&t.getValueAtPosition(e,n)<4}))},t.positionToId=function(e){return e.x+1e3*e.y},t.breadthFirstSearch=function(e){var n=e.map,i=e.start,o=e.end,r=new Set,a=[];a.push({position:i,path:[]});for(var l=function(){var e=a.shift(),i=e.position,l=e.path;if(t.arePositionsEqual(i,o))return{value:l};r.has(t.positionToId(i))||(r.add(t.positionToId(i)),t.getAdjacentPositions(i,n).forEach((function(e){a.push({position:e,path:l.concat([e])})})))};a.length;){var s=l();if("object"==typeof s)return s.value}return[]},t.areColliding=function(e,t){var n=e.position.x-t.position.x,i=e.position.y-t.position.y;return Math.sqrt(n*n+i*i)<e.radius+t.radius},t.move=function(e,t,n){var i=n/100;return e.x<t.x?{x:Number((e.x+=i).toFixed(4)),y:e.y}:e.x>t.x?{x:Number((e.x-=i).toFixed(4)),y:e.y}:e.y<t.y?{x:e.x,y:Number((e.y+=i).toFixed(4))}:e.y>t.y?{x:e.x,y:Number((e.y-=i).toFixed(4))}:void 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(1),r=n(2),a=n(3);t.towerBlueprints=[{type:"turret",damagePerFrame:1,radius:1.5,cost:100,color:"blue"},{type:"flamethrower",damagePerFrame:2,radius:1.2,cost:150,color:"red"}],t.updateTowers=function(e,t){e.forEach((function(e){e.isFiring=!1;var n=[];if(t.forEach((function(t){a.areColliding(e,t)&&n.push(t)})),n.sort((function(e,t){return e.id-t.id})),n.length){e.isFiring=!0;var i=e.damagePerFrame,o=n[0];o.isUnderFire=!0,o.health-=i}}))},t.renderTowers=function(e){e.forEach((function(e){var t=e.position,n=e.isFiring,o=t.x,r=t.y;i.CTX.fillStyle=e.color,i.CTX.fillRect(o*i.TILE_SIZE+10,r*i.TILE_SIZE+10,i.TILE_SIZE-20,i.TILE_SIZE-20),n&&(i.CTX.fillStyle="white",i.CTX.beginPath(),i.CTX.arc(o*i.TILE_SIZE+.5*i.TILE_SIZE,r*i.TILE_SIZE+.5*i.TILE_SIZE,5,0,2*Math.PI),i.CTX.fill())}))},t.renderActiveTowerUI=function(e){if(e){var t=e.position,n=e.radius;i.CTX.fillStyle="rgba(255,255,255,.1)",i.CTX.beginPath(),i.CTX.arc(t.x*i.TILE_SIZE+.5*i.TILE_SIZE,t.y*i.TILE_SIZE+.5*i.TILE_SIZE,n*i.TILE_SIZE,0,2*Math.PI),i.CTX.fill()}},t.renderConstructionUI=function(){var e=r.construction.displayPreview,t=r.construction.blueprint;if(t){var n=t.cost,l=t.color,s=t.radius,u=r.mouse.position,c=r.money.value;e&&u&&0===a.getValueAtPosition(u,o.level01.map)&&n<=c&&(i.CTX.fillStyle="rgba(255,255,255,.1)",i.CTX.beginPath(),i.CTX.arc(u.x*i.TILE_SIZE+.5*i.TILE_SIZE,u.y*i.TILE_SIZE+.5*i.TILE_SIZE,s*i.TILE_SIZE,0,2*Math.PI),i.CTX.fill(),i.CTX.fillStyle=l,i.CTX.fillRect(u.x*i.TILE_SIZE+10,u.y*i.TILE_SIZE+10,i.TILE_SIZE-20,i.TILE_SIZE-20)),n>c&&r.construction.hidePreview()}},t.towers=[]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(7),r=n(1),a=n(2),l=n(4),s=n(8),u=n(9);t.finishLevel=function(){console.log("level won!")};var c=function(){return window.performance&&window.performance.now?window.performance.now():(new Date).getTime()},f=c(),v=0;t.frame=function(){var e=c(),n=a.game.isFastForward?1/240:1/60;for(v+=Math.min(1,(e-f)/1e3);v>n;)v-=n,a.game.isPaused||a.game.isGameOver||(a.tick.increase(),o.spawnEnemies(),o.updateEnemies(o.activeEnemies),l.updateTowers(l.towers,o.activeEnemies));f=e,r.renderMap(r.level01.map),l.renderTowers(l.towers),o.renderEnemies(o.activeEnemies),l.renderConstructionUI(),l.renderActiveTowerUI(a.activeTower.value),r.renderBuildings(r.level01.map),a.hqHealth.value<=0&&(console.log("game over!"),a.game.setGameOver(!0)),a.game.isGameOver||requestAnimationFrame(t.frame)};t.startGame=function(){var e;(e=i.CANVAS).width=r.level01.map[0].length*i.TILE_SIZE,e.style.width=r.level01.map[0].length*i.TILE_SIZE+"px",e.height=r.level01.map.length*i.TILE_SIZE,e.style.height=r.level01.map.length*i.TILE_SIZE+"px",s.initializeUI(),u.registerEventHandlers(),a.money.set(i.STARTING_MONEY),a.hqHealth.set(i.STARTING_HQ_HEALTH),a.waves.set(0),requestAnimationFrame(t.frame)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(5).startGame()},function(e,t,n){"use strict";var i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(5),a=n(1),l=n(2),s=n(3);t.spawnEnemy=function(e){t.activeEnemies.push(i(i({},e),{id:l.id.get(),isUnderFire:!1,position:s.getUniquePosition(a.level01.map,2),route:s.breadthFirstSearch({end:o.HEADQUARTERS,map:a.level01.map,start:o.SPAWN_LOCATION})}))},t.spawnEnemies=function(){if(l.tick.value%30==0&&a.level01.waves[l.waves.value]&&a.level01.waves[l.waves.value].amount){a.level01.waves[l.waves.value].amount--;var e=t.enemyBlueprints.find((function(e){return e.type===a.level01.waves[l.waves.value].type}));t.spawnEnemy(e)}a.level01.waves[l.waves.value].amount<1&&(l.tick.increaseWaveTick(),l.tick.waveTick%1200==0&&(l.waves.value<a.level01.waves.length-1&&l.waves.increase(),l.tick.waveTick=0))},t.updateEnemies=function(e){e.forEach((function(t){var n=t.position,i=t.route,u=t.health,c=t.reward,f=t.speed;if(u<=0&&l.money.increaseBy(c),s.arePositionsEqual(n,o.HEADQUARTERS)&&l.hqHealth.decrease(),s.arePositionsEqual(n,o.HEADQUARTERS)||u<=0)return e.splice(e.indexOf(t),1),l.waves.value===a.level01.waves.length-1&&0===e.length&&r.finishLevel(),null;s.arePositionsEqual(n,i[0])&&i.shift(),t.position=s.move(n,i[0],f),t.isUnderFire=!1}))},t.renderEnemies=function(e){e.forEach((function(e){var t=e.position,n=e.isUnderFire,i=e.health,r=e.originalHealth,a=e.color;o.CTX.fillStyle=n?"white":a,o.CTX.beginPath(),o.CTX.arc(t.x*o.TILE_SIZE+.5*o.TILE_SIZE,t.y*o.TILE_SIZE+.5*o.TILE_SIZE,5,0,2*Math.PI),o.CTX.fill(),i/r<1&&(o.CTX.fillStyle="black",o.CTX.fillRect(t.x*o.TILE_SIZE+17.5,t.y*o.TILE_SIZE+35,15,2),o.CTX.fillStyle="lime",o.CTX.fillRect(t.x*o.TILE_SIZE+17.5,t.y*o.TILE_SIZE+35,i/r*15,2))}))},t.enemyBlueprints=[{type:"normal",color:"red",radius:.05,originalHealth:75,health:75,reward:2,speed:2.5,intervalInTicks:30},{type:"heavy",color:"pink",radius:.05,originalHealth:150,health:150,reward:3,speed:2,intervalInTicks:25}],t.activeEnemies=[]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=n(2),r=n(4);t.initializeUI=function(){r.towerBlueprints.forEach((function(e){i.BOTTOM_BAR_DIV.innerHTML+="<div class='tower-slot "+e.type+'\'><div class="preview" style="background: '+e.color+'"/></div>'}))},t.clearTooltip=function(){i.TOOLTIP_CONTENT_DIV.innerHTML=""},t.renderTooltipLine=function(e){i.TOOLTIP_CONTENT_DIV.innerHTML+=e+"<br />"},t.renderToolTip=function(){if(t.clearTooltip(),i.TOOLTIP_DIV.style.display="none",o.activeTower.value){i.TOOLTIP_DIV.style.display="block";var e=o.activeTower.value.position;i.TOOLTIP_DIV.style.left=(e.x+1)*i.TILE_SIZE+"px",i.TOOLTIP_DIV.style.top=(e.y+2)*i.TILE_SIZE+"px",t.renderTooltipLine(o.activeTower.value.type),t.renderTooltipLine("damage: "+16*o.activeTower.value.damagePerFrame),t.renderTooltipLine("range: "+10*o.activeTower.value.radius),t.renderTooltipLine("fire rate: constant")}}},function(e,t,n){"use strict";var i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),r=n(0),a=n(1),l=n(2),s=n(4),u=n(3),c=function(){l.game.toggleFastForward(),r.FAST_FORWARD_DIV.innerHTML=l.game.isFastForward?">":">>"},f=function(e){l.activeTower.set(null),e.cost<=l.money.value&&(l.construction.setBlueprint(e),l.construction.showPreview())},v=function(e){var t=e.offsetX,n=e.offsetY,i={x:Math.floor(t/r.TILE_SIZE),y:Math.floor(n/r.TILE_SIZE)};l.mouse.setPosition(i)},T=function(){l.mouse.setPosition(null)};t.handleEscape=function(){l.construction.hidePreview(),l.activeTower.set(null)};var d=function(){var e=l.mouse.position,n=l.construction.blueprint,o=l.construction.displayPreview;if(4===u.getValueAtPosition(e,a.level01.map))return l.construction.hidePreview(),void l.activeTower.set(e);if(0===u.getValueAtPosition(e,a.level01.map)&&o&&n){var r=n.cost;l.money.decreaseBy(r),a.level01.map[e.y][e.x]=4,s.towers.push(i(i({},n),{id:l.id.get(),position:e,isFiring:!1})),l.construction.setPosition(null)}else t.handleEscape()},E=function(e){if("p"===e.key&&(l.game.togglePaused(),requestAnimationFrame(o.frame)),"f"===e.key&&c(),"Escape"===e.key&&t.handleEscape(),isFinite(Number(e.key))){var n=Number(e.key)-1;s.towerBlueprints[n]&&f(s.towerBlueprints[n])}};t.registerEventHandlers=function(){r.CANVAS.addEventListener("mousemove",v),r.CANVAS.addEventListener("mouseleave",T),r.CANVAS.addEventListener("click",d),document.addEventListener("keydown",E),r.FAST_FORWARD_DIV.addEventListener("click",c),s.towerBlueprints.forEach((function(e){document.querySelector(".tower-slot."+e.type).addEventListener("click",(function(){f(e)}))}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,